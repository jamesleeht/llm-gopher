// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package clienttype

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// Openai is a ClientType of type openai.
	Openai ClientType = "openai"
	// Vertex is a ClientType of type vertex.
	Vertex ClientType = "vertex"
)

var ErrInvalidClientType = errors.New("not a valid ClientType")

// String implements the Stringer interface.
func (x ClientType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClientType) IsValid() bool {
	_, err := ParseClientType(string(x))
	return err == nil
}

var _ClientTypeValue = map[string]ClientType{
	"openai": Openai,
	"vertex": Vertex,
}

// ParseClientType attempts to convert a string to a ClientType.
func ParseClientType(name string) (ClientType, error) {
	if x, ok := _ClientTypeValue[name]; ok {
		return x, nil
	}
	return ClientType(""), fmt.Errorf("%s is %w", name, ErrInvalidClientType)
}

// MarshalText implements the text marshaller method.
func (x ClientType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ClientType) UnmarshalText(text []byte) error {
	tmp, err := ParseClientType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errClientTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntClientTypeMap = map[int64]ClientType{
	0: Openai,
	1: Vertex,
}

var sqlIntClientTypeValue = map[ClientType]int64{
	Openai: 0,
	Vertex: 1,
}

func lookupSqlIntClientType(val int64) (ClientType, error) {
	x, ok := sqlIntClientTypeMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidClientType)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *ClientType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ClientType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntClientType(v)
	case string:
		*x, err = ParseClientType(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntClientType(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseClientType(string(v))
		}
	case ClientType:
		*x = v
	case int:
		*x, err = lookupSqlIntClientType(int64(v))
	case *ClientType:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntClientType(int64(v))
	case uint64:
		*x, err = lookupSqlIntClientType(int64(v))
	case *int:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = lookupSqlIntClientType(int64(*v))
	case *int64:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = lookupSqlIntClientType(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntClientType(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = lookupSqlIntClientType(int64(*v))
	case *uint:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = lookupSqlIntClientType(int64(*v))
	case *uint64:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = lookupSqlIntClientType(int64(*v))
	case *string:
		if v == nil {
			return errClientTypeNilPtr
		}
		*x, err = ParseClientType(*v)
	default:
		return errors.New("invalid type for ClientType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ClientType) Value() (driver.Value, error) {
	val, ok := sqlIntClientTypeValue[x]
	if !ok {
		return nil, ErrInvalidClientType
	}
	return int64(val), nil
}

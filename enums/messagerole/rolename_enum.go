// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package messagerole

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// Assistant is a MessageRole of type assistant.
	Assistant MessageRole = "assistant"
	// User is a MessageRole of type user.
	User MessageRole = "user"
)

var ErrInvalidMessageRole = errors.New("not a valid MessageRole")

// String implements the Stringer interface.
func (x MessageRole) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MessageRole) IsValid() bool {
	_, err := ParseMessageRole(string(x))
	return err == nil
}

var _MessageRoleValue = map[string]MessageRole{
	"assistant": Assistant,
	"user":      User,
}

// ParseMessageRole attempts to convert a string to a MessageRole.
func ParseMessageRole(name string) (MessageRole, error) {
	if x, ok := _MessageRoleValue[name]; ok {
		return x, nil
	}
	return MessageRole(""), fmt.Errorf("%s is %w", name, ErrInvalidMessageRole)
}

// MarshalText implements the text marshaller method.
func (x MessageRole) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MessageRole) UnmarshalText(text []byte) error {
	tmp, err := ParseMessageRole(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errMessageRoleNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntMessageRoleMap = map[int64]MessageRole{
	0: Assistant,
	1: User,
}

var sqlIntMessageRoleValue = map[MessageRole]int64{
	Assistant: 0,
	User:      1,
}

func lookupSqlIntMessageRole(val int64) (MessageRole, error) {
	x, ok := sqlIntMessageRoleMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidMessageRole)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *MessageRole) Scan(value interface{}) (err error) {
	if value == nil {
		*x = MessageRole("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntMessageRole(v)
	case string:
		*x, err = ParseMessageRole(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntMessageRole(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseMessageRole(string(v))
		}
	case MessageRole:
		*x = v
	case int:
		*x, err = lookupSqlIntMessageRole(int64(v))
	case *MessageRole:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntMessageRole(int64(v))
	case uint64:
		*x, err = lookupSqlIntMessageRole(int64(v))
	case *int:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = lookupSqlIntMessageRole(int64(*v))
	case *int64:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = lookupSqlIntMessageRole(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntMessageRole(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = lookupSqlIntMessageRole(int64(*v))
	case *uint:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = lookupSqlIntMessageRole(int64(*v))
	case *uint64:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = lookupSqlIntMessageRole(int64(*v))
	case *string:
		if v == nil {
			return errMessageRoleNilPtr
		}
		*x, err = ParseMessageRole(*v)
	default:
		return errors.New("invalid type for MessageRole")
	}

	return
}

// Value implements the driver Valuer interface.
func (x MessageRole) Value() (driver.Value, error) {
	val, ok := sqlIntMessageRoleValue[x]
	if !ok {
		return nil, ErrInvalidMessageRole
	}
	return int64(val), nil
}

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package modelname

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// DeepseekDeepseekV3Turbo is a ModelName of type deepseek/deepseek-v3-turbo.
	DeepseekDeepseekV3Turbo ModelName = "deepseek/deepseek-v3-turbo"
	// DeepseekDeepseekV31 is a ModelName of type deepseek/deepseek-v3.1.
	DeepseekDeepseekV31 ModelName = "deepseek/deepseek-v3.1"
	// Gemini20Flash is a ModelName of type gemini-2.0-flash.
	Gemini20Flash ModelName = "gemini-2.0-flash"
	// Gemini25Flash is a ModelName of type gemini-2.5-flash.
	Gemini25Flash ModelName = "gemini-2.5-flash"
	// Gemini25Pro is a ModelName of type gemini-2.5-pro.
	Gemini25Pro ModelName = "gemini-2.5-pro"
	// Gpt4OSearchPreview is a ModelName of type gpt-4o-search-preview.
	Gpt4OSearchPreview ModelName = "gpt-4o-search-preview"
	// Gpt4OMiniSearchPreview is a ModelName of type gpt-4o-mini-search-preview.
	Gpt4OMiniSearchPreview ModelName = "gpt-4o-mini-search-preview"
)

var ErrInvalidModelName = errors.New("not a valid ModelName")

// String implements the Stringer interface.
func (x ModelName) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ModelName) IsValid() bool {
	_, err := ParseModelName(string(x))
	return err == nil
}

var _ModelNameValue = map[string]ModelName{
	"deepseek/deepseek-v3-turbo": DeepseekDeepseekV3Turbo,
	"deepseek/deepseek-v3.1":     DeepseekDeepseekV31,
	"gemini-2.0-flash":           Gemini20Flash,
	"gemini-2.5-flash":           Gemini25Flash,
	"gemini-2.5-pro":             Gemini25Pro,
	"gpt-4o-search-preview":      Gpt4OSearchPreview,
	"gpt-4o-mini-search-preview": Gpt4OMiniSearchPreview,
}

// ParseModelName attempts to convert a string to a ModelName.
func ParseModelName(name string) (ModelName, error) {
	if x, ok := _ModelNameValue[name]; ok {
		return x, nil
	}
	return ModelName(""), fmt.Errorf("%s is %w", name, ErrInvalidModelName)
}

// MarshalText implements the text marshaller method.
func (x ModelName) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ModelName) UnmarshalText(text []byte) error {
	tmp, err := ParseModelName(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errModelNameNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntModelNameMap = map[int64]ModelName{
	0: DeepseekDeepseekV3Turbo,
	1: DeepseekDeepseekV31,
	2: Gemini20Flash,
	3: Gemini25Flash,
	4: Gemini25Pro,
	5: Gpt4OSearchPreview,
	6: Gpt4OMiniSearchPreview,
}

var sqlIntModelNameValue = map[ModelName]int64{
	DeepseekDeepseekV3Turbo: 0,
	DeepseekDeepseekV31:     1,
	Gemini20Flash:           2,
	Gemini25Flash:           3,
	Gemini25Pro:             4,
	Gpt4OSearchPreview:      5,
	Gpt4OMiniSearchPreview:  6,
}

func lookupSqlIntModelName(val int64) (ModelName, error) {
	x, ok := sqlIntModelNameMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidModelName)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *ModelName) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ModelName("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntModelName(v)
	case string:
		*x, err = ParseModelName(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntModelName(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseModelName(string(v))
		}
	case ModelName:
		*x = v
	case int:
		*x, err = lookupSqlIntModelName(int64(v))
	case *ModelName:
		if v == nil {
			return errModelNameNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntModelName(int64(v))
	case uint64:
		*x, err = lookupSqlIntModelName(int64(v))
	case *int:
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = lookupSqlIntModelName(int64(*v))
	case *int64:
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = lookupSqlIntModelName(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntModelName(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = lookupSqlIntModelName(int64(*v))
	case *uint:
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = lookupSqlIntModelName(int64(*v))
	case *uint64:
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = lookupSqlIntModelName(int64(*v))
	case *string:
		if v == nil {
			return errModelNameNilPtr
		}
		*x, err = ParseModelName(*v)
	default:
		return errors.New("invalid type for ModelName")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ModelName) Value() (driver.Value, error) {
	val, ok := sqlIntModelNameValue[x]
	if !ok {
		return nil, ErrInvalidModelName
	}
	return int64(val), nil
}
